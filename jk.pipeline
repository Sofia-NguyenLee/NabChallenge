pipeline { 
    parameters {
    string defaultValue: '*/develop', description: 'branch to build', name: 'BRANCH_TO_BUILD', trim: false
    string defaultValue: 'default', description: 'service name', name: 'SERVICE_NAME', trim: false
    string defaultValue: 'platform-development-imv', description: 'project id', name: 'PROJECT_ID', trim: false
    booleanParam defaultValue: true, description: 'Do you want deploy to gcp?', name: 'WILL_DEPLOY'
    booleanParam defaultValue: true, description: 'Do you want run unittest?', name: 'RUN_UNITTEST'
    }
    environment {
        DEPLOY_VERSION = ''
        GIT_BRANCH = ''
    }
    agent any
    options {
        skipStagesAfterUnstable()
        skipDefaultCheckout(true)
    }
    stages {
        stage('Build') {
            steps {
                script {
                    def myRepo = checkout scm
                    def gitCommit = myRepo.GIT_COMMIT
                    GIT_BRANCH = myRepo.GIT_BRANCH
                    def shortGitCommit = "v-${gitCommit[0..6]}"
                    DEPLOY_VERSION = "${shortGitCommit}-${BUILD_NUMBER}"

                    npm install
                    npm install -D cypress
                    npm run "e2e:chrome"                
                }
            }
        }
        stage('Test'){
            steps {
                script {
                    if(params.RUN_UNITTEST == true){
                        sh """
                        """
                    }
                    else{
                        echo "Skipped UnitTest"
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    if(params.WILL_DEPLOY == true){
                        readFile('env.txt').split("\r?\n").each {
                            def envItem = it.split("=")
                            sh """
                                sed -i "s|{_${envItem[0]}}|${envItem[1]}|g" ./common/deployments/app.yaml
                            """
                        }
                        sh """
                            rm -f Pipfile*
                            gcloud config set project ${params.PROJECT_ID}
                            sed -i 's/{_SERVICE_NAME}/${params.SERVICE_NAME}/' ./common/deployments/app.yaml
                            cp ./common/deployments/app.yaml ./app.yaml
                            gcloud app deploy app.yaml --project ${params.PROJECT_ID}  -v ${DEPLOY_VERSION}
                            gcloud config set project rental-app-9015d
                        """
                        echo "Deploy ${GIT_BRANCH} branch to GCP is successful"
                    }
                    else{
                        echo "Don't deploy ${GIT_BRANCH} branch to GCP"
                    }
                    deleteDir()
                    echo "Record all issues is done"
                }
            }
        }
    }
}